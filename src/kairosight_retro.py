#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import json
import os
import sys
import time
import math
import numpy as np
from pathlib import Path, PurePath
from random import random

from util.preparation import open_stack, reduce_stack, mask_generate,\
    mask_apply, img_as_uint, rescale
from util.processing import normalize_stack, filter_spatial, map_snr,\
    find_tran_act
from util.analysis import calc_tran_duration, map_tran_analysis, DUR_MAX
'from ui.KairoSight_WindowMDI import Ui_WindowMDI'
from ui.KairoSight_WindowMain_Retro import Ui_MainWindow
from PyQt5.QtCore import QObject, pyqtSignal, Qt
from PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QFileDialog, QListWidget
from PyQt5.QtGui import QColor
import pyqtgraph as pg
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt4agg import (
    FigureCanvasQTAgg as FigureCanvas,
    NavigationToolbar2QT as NavigationToolbar)
import matplotlib.pyplot as plt
import matplotlib.ticker as plticker
import matplotlib.colors as colors
import matplotlib.font_manager as fm
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar
import util.ScientificColourMaps5 as SCMaps
from tests.intergration.test_Map import fontsize3, fontsize4, marker1,\
    marker3, gray_heavy, color_snr, cmap_snr, cmap_activation,\
    ACT_MAX_PIG_LV, ACT_MAX_PIG_WHOLE, cmap_duration,\
    add_map_colorbar_stats


'''class WindowMDI(QMainWindow, Ui_WindowMDI):
    """Customization for Ui_MDIMainWindow, and MDI main window"""

    def __init__(self, parent=None):
        # initialization of the superclass
        super(WindowMDI, self).__init__(parent)
        # setup the GUI --> function generated by pyuic5
        self.setupUi(self)
        self.raise_()
        # connect the signals with the slots
        # self.actionLoad.triggered.connect(self.open_tiff)
        # self.actionClose.triggered.connect(self.close)
        self.actionTIFF.triggered.connect(self.open_tiff)

    def open_tiff(self, file=None):
        """Open a WindowMain with a TIFF stack within the MDI area"""
        if file:
            print('Opening tiff with passed filepath: ' + file)
        else:
            # Use a QFileDialog to get filepath if none provided
            file, mask = QFileDialog.getOpenFileName(self, 'Open a .tif/.tiff stack')

        if file:
            self.status_print('Opening ' + file + ' ...')
            f_purepath = PurePath(file)
            f_ext = f_purepath.suffix
            if f_ext == '.pcoraw':
                # Change .pcoraw files to .tif?
                # os.rename(file, f_name + '.tif')
                p = Path(file)
                p.rename(p.with_suffix('.tif'))
                print('* .pcoraw covnerted to a .tif')
                # Use a QFileDialog to get the new filepath
                file, mask = QFileDialog.getOpenFileName(self, 'Open a .tif/.tiff stack')
                self.status_print('Opening ' + file + ' ...')
                f_purepath = PurePath(file)

            f_display = str(f_purepath.parent) + '\\' + '\t' + f_purepath.stem + ' ' + f_purepath.suffix
            print('file (path name ext): ' + f_display)
            try:
                # Create QMdiSubWindow with Ui_WidgetTiff
                sub = WindowMain(parent=self, file_purepath=f_purepath)
                sub.setObjectName(str(file))
                sub.setWindowTitle('TIFF View: ' + f_display)
                # Add and connect QMdiSubWindow to MDI
                self.mdiArea.addSubWindow(sub)
                sub.show()
                self.status_print('Opened ' + file)
            except:
                exc_type, exc_value, tb = sys.exc_info()
                exc_lineno = tb.tb_lineno
                self.status_print('ERROR at line {}' + str(exc_type) + ' : ' + str(exc_value))
        else:
            print('path is None')
            self.status_print('Open cancelled')

    def status_print(self, text):
        self.statusBar().showMessage(text)'''


class Stream(QObject):
    newText = pyqtSignal(str)

    def write(self, text):
        self.newText.emit(str(text))


class MplCanvas(FigureCanvas):
    def __init__(self, parent=None, width=391, height=391, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)


class MainWindow(QWidget, Ui_MainWindow):
    """Customization for Ui_WindowMain"""

    def __init__(self, parent=None, file_purepath=None):
        #Initialization of the superclass
        super(MainWindow, self).__init__(parent)
        '''self.WindowMDI = parent'''
        # Setup the UI
        self.setupUi(self)
        # Setup the plotting window
        self.mpl_canvas = MplCanvas(self)
        # self.mpl_vl_window.addWidget(self.mpl_canvas)
        self.mpl_canvas.move(140, 10)
        self.mpl_canvas.resize(391, 391)
        self.mpl_canvas.axes.plot([0, 1, 2, 3, 4], [10, 1, 20, 3, 40])
        # Setup button functionality
        self.SelectDirectoryButton.clicked.connect(self.sel_dir)
        self.LoadButton.clicked.connect(self.load_data)

    def sel_dir(self):
        # Open dialogue box for selecting the data directory
        self.file_path = QFileDialog.getExistingDirectory(self,"Open Directory", os.getcwd(), QFileDialog.ShowDirsOnly)
        # Grab the applicable file names of the directory and display
        self.data_files = []
        for file in os.listdir(self.file_path):
            if file.endswith(".tif"):
                self.data_files.append(file)
        # Populate the list widget with the file names
        self.file_list.addItems(self.data_files)
        # Set the current row to the first (i.e., index = 0)
        self.file_list.setCurrentRow(0)

    def load_data(self):
        # Grab the selected items name
        print('Hey!')
        self.file_name = self.file_list.currentItem().text()
        # Load the data stack into the UI
        print("How!")
        self.data_stack = open_stack(self.file_path + "/" + self.file_name)
        print('Test: ' + self.file_path + '/' + self.file_name)
        # Extract the optical data from the stack
        print("Are!")
        self.data = self.data_stack[0]
        print("Ya?!?!")
        # Update the UI with an image off the top of the stack
        self.mpl_canvas.axes.imshow(self.data[0], cmap='gray')
        print('Come on!')
        self.mpl_canvas.draw()
        # self.mpl_canvas.axes.plot([0, 1, 2, 3, 4], [10, 1, 20, 3, 40])
        print('Hello World!')
        print(self.data.shape)
        # self.canvas = FigureCanvas(self.fig1)
        # self.mpl_window_vl.addWidget(self.canvas)
        # self.canvas.draw()

    '''def addmpl(self, fig):
        self.canvas = FigureCanvas(fig)
        self.mpl_window_vl.addWidget(self.canvas)
        self.canvas.draw()'''


if __name__ == '__main__':
    fig1 = Figure()
    ax1f1 = fig1.add_subplot(111)
    ax1f1.plot(np.random.rand(5))
    # create the GUI application
    app = QApplication(sys.argv)
    # instantiate and show the main window
    ks_main = MainWindow()
    # ks_main.addmpl(fig1)
    ks_main.show()
    # start the Qt main loop execution, exiting from this script
    # with the same return code as the Qt application
    sys.exit(app.exec_())
