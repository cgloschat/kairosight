#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys
from pathlib import PurePath
from skimage import io
from PyQt5 import QtCore
from PyQt5.QtCore import QDir
from PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QFileDialog, QFileSystemModel
from ui.KairoSightMainMDI import Ui_MDIMainWindow
from ui.KairoSightWidgetTIFF import Ui_WidgetTiff
from ui.KairoSightWidgetFolderTree import Ui_WidgetFolderTree
from ui.KairoSightWidgetImageProcess import Ui_WidgetImageProcess
from algorithms import tifopen


class DesignerMainWindow(QMainWindow, Ui_MDIMainWindow):
    """Customization for Qt Designer created window"""

    def __init__(self, parent=None):
        # initialization of the superclass
        super(DesignerMainWindow, self).__init__(parent)
        # setup the GUI --> function generated by pyuic4
        self.setupUi(self)
        # connect the signals with the slots
        # self.actionLoad.triggered.connect(self.open_tiff)
        # self.actionClose.triggered.connect(self.close)
        self.actionTIFF.triggered.connect(self.open_tiff)
        self.actionFolder.triggered.connect(self.open_folder)
        self.actionStart_ImageProcess.triggered.connect(self.image_process)

    def open_tiff(self, file=None):
        """Open a SubWindow with a TIFF stack in the main MDI area"""
        if file:
            print('Opening tiff with passed filepath: ' + file)
        else:
            # Use a QFileDialog to get filepath if none provided
            file, mask = QFileDialog.getOpenFileName(self, 'Open a .tif/.tiff stack')

        print('Path chosen: ' + file)
        if file:
            self.statusBar().showMessage('Opening ' + file + '...')
            f_purepath = PurePath(file)
            f_path = str(f_purepath.parent) + '\\'
            f_name = f_purepath.stem
            f_ext = f_purepath.suffix
            f_display = f_path + ' ' + f_name + ' ' + f_ext
            print('file (path name ext): ' + f_display)
            if f_ext is '.tif' or '.tiff':
                print('TIFF chosen')
                # Create QMdiSubWindow with Ui_WidgetTiff
                try:
                    sub = DesignerSubWindowTiff(f_path=f_path, f_name=f_name, f_ext=f_ext)
                    print('DesignerSubWindowTiff "sub" created')
                    print('Set "sub" widget to "Ui_WidgetTiff"')
                    sub.setObjectName(str(file))
                    sub.setWindowTitle('TIFF View: ' + f_display)
                    # Add and connect QMdiSubWindow to MDI
                    self.mdiArea.addSubWindow(sub)
                    print('"sub" added to MDI')
                    sub.show()
                    self.statusBar().showMessage('Opened ' + file)
                except Exception as e:
                    print(e)
                    self.statusBar().showMessage(str(e) + ' , ' + file)

    def open_folder(self):
        """Open a SubWindow with a folder tree view in the main MDI area"""
        folder_path = QFileDialog.getExistingDirectory(self, 'Choose a folder to view')
        print('Folder chosen! path: ' + folder_path)
        # Create QMdiSubWindow with Ui_WidgetTiff
        sub = DesignerSubWindowFolder(root=folder_path)
        print('DesignerSubWindowFolder "sub" created')
        print('Set "sub" widget to "Ui_WidgetFolderTree"')
        sub.setWindowTitle('Folder View: ' + folder_path)
        # Add and connect QMdiSubWindow to MDI
        self.mdiArea.addSubWindow(sub)
        sub.pushButtonOpen.released.connect(lambda: self.open_tiff(sub.currentFilePath))
        print('"sub" added to MDI')
        sub.show()

    def image_process(self):
        """Open the Image Process SubWindow"""
        print("***List of all subWindows in MDI:")
        windows_object_names = []
        for sub in self.mdiArea.subWindowList():
            windows_object_names.append(sub.widget().objectName())
            print(sub.widget().objectName())
        sub = DesignerSubWindowImageProcess(w_list=windows_object_names)
        self.mdiArea.addSubWindow(sub)
        sub.show()


class DesignerSubWindowTiff(QWidget, Ui_WidgetTiff):
    """Customization for WidgetTiff subwindow for an MDI"""

    def __init__(self, parent=None, f_path=None, f_name=None, f_ext=None):
        # initialization of the superclass
        super(DesignerSubWindowTiff, self).__init__(parent)
        # setup the GUI --> function generated by pyuic4
        self.setupUi(self)
        self.horizontalScrollBar.valueChanged['int'].connect(self.update_video)

        # Using skimage aka scikit-image from SciPy
        self.video_path = f_path
        self.video_name = f_name
        self.video_ext = f_ext
        self.video_file, self.dt = tifopen.tifopen(self.video_path, self.video_name + self.video_ext)
        self.video_shape = self.video_file.shape
        if len(self.video_shape) < 3:
            raise Exception('TIFF has less than 3 dimensions')
        self.frames = self.video_shape[0]
        self.fps = 1 / self.dt
        print('video shape: ', self.video_shape)
        print('Width x Height: ', self.video_shape[1], self.video_shape[2])
        print('# of Frames: ', self.frames)
        print('FPS: ', self.fps)
        self.horizontalScrollBar.setMinimum(1)
        self.horizontalScrollBar.setMaximum(self.frames - 1)
        self.update_video(1)

    def update_video(self, frame=0):
        """Updates the video frame drawn to the canvas"""
        print('Updating video plot in a subWindow with:')
        print('***' + self.video_name + '[' + str(frame) + ']')
        # clear the Axes
        self.mpl.canvas.ax.clear()

        # show the image
        self.mpl.canvas.ax.imshow(self.video_file[frame - 1], cmap='gray')
        print('imshow called')
        self.mpl.canvas.ax.axis('off')
        self.mpl.canvas.draw()


class DesignerSubWindowFolder(QWidget, Ui_WidgetFolderTree):
    """Customization for WidgetFolderTree subwindow for an MDI"""

    def __init__(self, parent=None, root=None):
        # initialization of the superclass
        super(DesignerSubWindowFolder, self).__init__(parent)
        self.dir = QDir(root)
        self.currentFileName = ''
        self.currentFilePath = ''
        # setup the GUI --> function generated by pyuic4
        self.setupUi(self)
        print('WidgetFolderTree UI setup')
        self.model = QFileSystemModel()
        self.model.setRootPath(root)
        self.treeView.setModel(self.model)
        self.treeView.setRootIndex(self.model.index(root))
        # self.pushButtonOpen.released.connect(self.open_tiff_from_folder)
        print('treeView ready')

    @QtCore.pyqtSlot(QtCore.QModelIndex)
    def on_treeView_clicked(self, index):
        index_item = self.model.index(index.row(), 0, index.parent())
        self.currentFileName = self.model.fileName(index_item)
        self.currentFilePath = self.model.filePath(index_item)
        print('Clicked: ' + self.currentFilePath + ' ' + self.currentFileName)

    def open_tiff_from_folder(self):
        # self.treeView.setTreePosition(2)
        print('Opening a tiff from a folder: ' + self.currentFileName)


class DesignerSubWindowImageProcess(QWidget, Ui_WidgetImageProcess):
    """Customization for WidgetFolderTree subwindow for an MDI"""

    def __init__(self, parent=None, w_list=None):
        # initialization of the superclass
        super(DesignerSubWindowImageProcess, self).__init__(parent)
        self.windowListNames = w_list
        self.currentFileName = ''
        self.currentFilePath = ''
        # setup the GUI --> function generated by pyuic4
        self.setupUi(self)
        self.listWidgetOpenTiffs.addItems(self.windowListNames)
        print('WidgetImageProcess UI setup')
        # self.model = QFileSystemModel()
        # self.model.setRootPath(root)
        # self.treeView.setModel(self.model)
        # self.treeView.setRootIndex(self.model.index(root))
        # self.pushButtonOpen.released.connect(self.open_tiff_from_folder)
        print('WidgetImageProcess ready')
    #
    # @QtCore.pyqtSlot(QtCore.QModelIndex)
    # def on_treeView_clicked(self, index):
    #     index_item = self.model.index(index.row(), 0, index.parent())
    #     self.currentFileName = self.model.fileName(index_item)
    #     self.currentFilePath = self.model.filePath(index_item)
    #     print('Clicked: ' + self.currentFilePath + ' ' + self.currentFileName)
    #
    # def open_tiff_from_folder(self):
    #     # self.treeView.setTreePosition(2)
    #     print('Opening a tiff from a folder: ' + self.currentFileName)


# create the GUI application
app = QApplication(sys.argv)
# instantiate the main window
dmw = DesignerMainWindow()
# show it
dmw.show()
# start the Qt main loop execution, exiting from this script
# with the same return code as the Qt application
sys.exit(app.exec_())
